#ifdef _FRAGMENT_

#ifdef IMPROVED_TEX_PERLIN
// Improved Perlin noise with derivatives
// http://www.iquilezles.org/www/articles/morenoise/morenoise.htm
//-----------------------------------------------------------------------------
// 3D Perlin noise

float   _noise(vec3 p)
{
    const float one = 1.0 / 256.0;

    // Find unit cube that contains point
    // Find relative x,y,z of point in cube
    vec3 P = mod(floor(p), 256.0) * one;
    p -= floor(p);

    // Compute fade curves for each of x,y,z
    vec3 ff = p * p * p * (p * (p * 6.0 - 15.0) + 10.0);

    // Hash coordinates of the 8 cube corners
    vec4 AA = texture(PermSampler, P.xy) + P.z;

    float a = dot(texture(PermGradSampler, AA.x      ).rgb,  p);
    float b = dot(texture(PermGradSampler, AA.z      ).rgb,  p + vec3(-1,  0,  0));
    float c = dot(texture(PermGradSampler, AA.y      ).rgb,  p + vec3( 0, -1,  0));
    float d = dot(texture(PermGradSampler, AA.w      ).rgb,  p + vec3(-1, -1,  0));
    float e = dot(texture(PermGradSampler, AA.x + one).rgb,  p + vec3( 0,  0, -1));
    float f = dot(texture(PermGradSampler, AA.z + one).rgb,  p + vec3(-1,  0, -1));
    float g = dot(texture(PermGradSampler, AA.y + one).rgb,  p + vec3( 0, -1, -1));
    float h = dot(texture(PermGradSampler, AA.w + one).rgb,  p + vec3(-1, -1, -1));

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return k0 + k1*ff.x + k2*ff.y + k3*ff.z + k4*ff.x*ff.y + k5*ff.y*ff.z + k6*ff.z*ff.x + k7*ff.x*ff.y*ff.z;
}

//-----------------------------------------------------------------------------
// 3D Perlin noise with derivatives, returns vec4(xderiv, yderiv, zderiv, noise)

vec4    NoiseDeriv(vec3 p)
{
    const float one = 1.0 / 256.0;

    // Find unit cube that contains point
    // Find relative x,y,z of point in cube
    vec3 P = mod(floor(p), 256.0) * one;
    p -= floor(p);

    // Compute fade curves for each of x,y,z
    vec3 df = 30.0 * p * p * (p * (p - 2.0) + 1.0);
    vec3 ff = p * p * p * (p * (p * 6.0 - 15.0) + 10.0);

    // Hash coordinates of the 8 cube corners
    vec4 AA = texture(PermSampler, P.xy) + P.z;

    float a = dot(texture(PermGradSampler, AA.x      ).rgb,  p);
    float b = dot(texture(PermGradSampler, AA.z      ).rgb,  p + vec3(-1,  0,  0));
    float c = dot(texture(PermGradSampler, AA.y      ).rgb,  p + vec3( 0, -1,  0));
    float d = dot(texture(PermGradSampler, AA.w      ).rgb,  p + vec3(-1, -1,  0));
    float e = dot(texture(PermGradSampler, AA.x + one).rgb,  p + vec3( 0,  0, -1));
    float f = dot(texture(PermGradSampler, AA.z + one).rgb,  p + vec3(-1,  0, -1));
    float g = dot(texture(PermGradSampler, AA.y + one).rgb,  p + vec3( 0, -1, -1));
    float h = dot(texture(PermGradSampler, AA.w + one).rgb,  p + vec3(-1, -1, -1));

    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   e - a;
    float k4 =   a - b - c + d;
    float k5 =   a - c - e + g;
    float k6 =   a - b - e + f;
    float k7 = - a + b + c - d + e - f - g + h;

    return vec4(df.x * (k1 + k4*ff.y + k6*ff.z + k7*ff.y*ff.z),
                df.y * (k2 + k5*ff.z + k4*ff.x + k7*ff.z*ff.x),
                df.z * (k3 + k6*ff.x + k5*ff.y + k7*ff.x*ff.y),
                k0 + k1*ff.x + k2*ff.y + k3*ff.z + k4*ff.x*ff.y + k5*ff.y*ff.z + k6*ff.z*ff.x + k7*ff.x*ff.y*ff.z);
}

//-----------------------------------------------------------------------------
#else
//	Brian Sharpe
//	brisharpe CIRCLE_A yahoo DOT com
//	http://briansharpe.wordpress.com
//	https://github.com/BrianSharpe
//-----------------------------------------------------------------------------
// Generates 3 random numbers for each of the 8 cell corners

void FastHash3D(vec3 gridcell,
                out vec4 lowz_hash_0,
                out vec4 lowz_hash_1,
                out vec4 lowz_hash_2,
                out vec4 highz_hash_0,
                out vec4 highz_hash_1,
                out vec4 highz_hash_2)
{
    // gridcell is assumed to be an integer coordinate
    const vec2  OFFSET = vec2(50.0, 161.0);
    const float DOMAIN = 69.0;
    const vec3  SOMELARGEFLOATS = vec3(635.298681, 682.357502, 668.926525);
    const vec3  ZINC = vec3(48.500388, 65.294118, 63.934599);

    //	truncate the domain
    gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * (1.0 / DOMAIN)) * DOMAIN;
    vec3 gridcell_inc1 = mix(gridcell + vec3(1.0), vec3(0.0), greaterThan(gridcell, vec3(DOMAIN - 1.5)));

    //	calculate the noise
    vec4 P = vec4(gridcell.xy, gridcell_inc1.xy) + OFFSET.xyxy;
    P *= P;
    P = P.xzxz * P.yyww;
    lowz_hash_2.xyzw = vec4(1.0) / (SOMELARGEFLOATS.xyzx + vec2(gridcell.z, gridcell_inc1.z).xxxy * ZINC.xyzx);
    highz_hash_2.xy  = vec2(1.0) / (SOMELARGEFLOATS.yz + gridcell_inc1.zz * ZINC.yz);
    lowz_hash_0  = fract(P *  lowz_hash_2.xxxx);
    highz_hash_0 = fract(P *  lowz_hash_2.wwww);
    lowz_hash_1  = fract(P *  lowz_hash_2.yyyy);
    highz_hash_1 = fract(P * highz_hash_2.xxxx);
    lowz_hash_2  = fract(P *  lowz_hash_2.zzzz);
    highz_hash_2 = fract(P * highz_hash_2.yyyy);
}

//-----------------------------------------------------------------------------
// Generates a random number for each of the 8 cell corners

void FastHash3D(vec3 gridcell, out vec4 lowz_hash, out vec4 highz_hash)
{
	// gridcell is assumed to be an integer coordinate
	const vec2 OFFSET = vec2(50.0, 161.0);
	const float DOMAIN = 69.0;
	const float SOMELARGEFLOAT = 635.298681;
	const float ZINC = 48.500388;

	//	truncate the domain
	gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * (1.0 / DOMAIN)) * DOMAIN;
	vec3 gridcell_inc1 = step(gridcell, vec3(DOMAIN - 1.5)) * (gridcell + 1.0);

	//	calculate the noise
	vec4 P = vec4(gridcell.xy, gridcell_inc1.xy) + OFFSET.xyxy;
	P *= P;
	P = P.xzxz * P.yyww;
	highz_hash.xy = vec2(1.0 / (SOMELARGEFLOAT + vec2(gridcell.z, gridcell_inc1.z) * ZINC));
	lowz_hash  = fract(P * highz_hash.xxxx );
	highz_hash = fract(P * highz_hash.yyyy );
}

//-----------------------------------------------------------------------------
vec3 InterpC2(vec3 x) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }
//-----------------------------------------------------------------------------
// 3D Perlin noise without lookup textures

float _noise(vec3 p)
{
    // Establish our grid cell and unit position
    vec3 Pi = floor(p);
    vec3 Pf = p - Pi;
    vec3 Pf_min1 = Pf - 1.0;

#if 1
    // Classic noise. Requires 3 random values per point.
    // With an efficent hash function will run faster than improved noise.

    // Calculate the hash
    vec4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;
    FastHash3D(Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1);

    // Calculate the gradients
    const vec4 C = vec4(0.49999);
    vec4 grad_x0 = hashx0 - C;
    vec4 grad_y0 = hashy0 - C;
    vec4 grad_z0 = hashz0 - C;
    vec4 grad_x1 = hashx1 - C;
    vec4 grad_y1 = hashy1 - C;
    vec4 grad_z1 = hashz1 - C;
    vec4 grad_results_0 = inversesqrt(grad_x0 * grad_x0 + grad_y0 * grad_y0 + grad_z0 * grad_z0) * (vec2(Pf.x, Pf_min1.x).xyxy * grad_x0 + vec2(Pf.y, Pf_min1.y).xxyy * grad_y0 + Pf.zzzz * grad_z0);
    vec4 grad_results_1 = inversesqrt(grad_x1 * grad_x1 + grad_y1 * grad_y1 + grad_z1 * grad_z1) * (vec2(Pf.x, Pf_min1.x).xyxy * grad_x1 + vec2(Pf.y, Pf_min1.y).xxyy * grad_y1 + Pf_min1.zzzz * grad_z1);

    // Classic Perlin Interpolation
    vec3 blend = InterpC2(Pf);
    vec4 res0 = mix(grad_results_0, grad_results_1, blend.z);
    vec2 res1 = mix(res0.xy, res0.zw, blend.y);
    float final = mix(res1.x, res1.y, blend.x);
    final *= 1.1547005383792515290182975610039; // (optionally) scale things to a strict -1.0->1.0 rang *= 1.0/sqrt(0.75)
    return final;
#else
    // Improved noise. Requires 1 random value per point.
    // Will run faster than classic noise if a slow hashing function is used.

    // Calculate the hash
    vec4 hash_lowz, hash_highz;
    FastHash3D(Pi, hash_lowz, hash_highz);

#if 0
    // This will implement Ken Perlins "improved" classic noise using the 12 mid-edge gradient points.
    // NOTE: mid-edge gradients give us a nice strict -1.0->1.0 range without additional scaling.
    // [1,1,0] [-1,1,0] [1,-1,0] [-1,-1,0]
    // [1,0,1] [-1,0,1] [1,0,-1] [-1,0,-1]
    // [0,1,1] [0,-1,1] [0,1,-1] [0,-1,-1]
    hash_lowz *= 3.0;
    vec4 grad_results_0_0 = mix(vec2(Pf.y, Pf_min1.y).xxyy, vec2(Pf.x, Pf_min1.x).xyxy, lessThan(hash_lowz, vec4(2.0)));
    vec4 grad_results_0_1 = mix(Pf.zzzz, vec2(Pf.y, Pf_min1.y).xxyy, lessThan(hash_lowz, vec4(1.0)));
    hash_lowz = fract(hash_lowz) - 0.5;
    vec4 grad_results_0 = grad_results_0_0 * sign(hash_lowz) + grad_results_0_1 * sign(abs(hash_lowz) - vec4(0.25));

    hash_highz *= 3.0;
    vec4 grad_results_1_0 = mix(vec2(Pf.y, Pf_min1.y).xxyy, vec2(Pf.x, Pf_min1.x).xyxy, lessThan(hash_highz, vec4(2.0)));
    vec4 grad_results_1_1 = mix(Pf_min1.zzzz, vec2(Pf.y, Pf_min1.y).xxyy, lessThan(hash_highz, vec4(1.0)));
    hash_highz = fract(hash_highz) - 0.5;
    vec4 grad_results_1 = grad_results_1_0 * sign(hash_highz) + grad_results_1_1 * sign(abs(hash_highz) - vec4(0.25));

    // Blend the gradients and return
    vec3 blend = InterpC2(Pf);
    vec4 res0 = mix(grad_results_0, grad_results_1, blend.z);
    vec2 res1 = mix(res0.xy, res0.zw, blend.y);
    return mix(res1.x, res1.y, blend.x);
#else
    // "Improved" noise using 8 corner gradients. Faster than the 12 mid-edge point method.
    // Ken mentions using diagonals like this can cause "clumping", but we'll live with that.
    // [1,1,1]  [-1,1,1]  [1,-1,1]  [-1,-1,1]
    // [1,1,-1] [-1,1,-1] [1,-1,-1] [-1,-1,-1]
    hash_lowz -= vec4(0.5);
    vec4 grad_results_0_0 = vec2(Pf.x, Pf_min1.x).xyxy * sign(hash_lowz);
    hash_lowz = abs(hash_lowz) - vec4(0.25);
    vec4 grad_results_0_1 = vec2(Pf.y, Pf_min1.y).xxyy * sign(hash_lowz);
    vec4 grad_results_0_2 = Pf.zzzz * sign(abs(hash_lowz) - vec4(0.125));
    vec4 grad_results_0 = grad_results_0_0 + grad_results_0_1 + grad_results_0_2;

    hash_highz -= vec4(0.5);
    vec4 grad_results_1_0 = vec2(Pf.x, Pf_min1.x).xyxy * sign(hash_highz);
    hash_highz = abs(hash_highz) - vec4(0.25);
    vec4 grad_results_1_1 = vec2(Pf.y, Pf_min1.y).xxyy * sign(hash_highz);
    vec4 grad_results_1_2 = Pf_min1.zzzz * sign(abs(hash_highz) - vec4(0.125));
    vec4 grad_results_1 = grad_results_1_0 + grad_results_1_1 + grad_results_1_2;

    // Blend the gradients and return
    vec3 blend = InterpC2(Pf);
    vec4 res0 = mix(grad_results_0, grad_results_1, blend.z);
    vec2 res1 = mix(res0.xy, res0.zw, blend.y);
    return mix(res1.x, res1.y, blend.x) * (2.0 / 3.0);   // (optionally) mult by (2.0/3.0)to scale to a strict -1.0->1.0 range
#endif

#endif
}

//-----------------------------------------------------------------------------
// 3D Perlin noise with derivatives, returns vec4(xderiv, yderiv, zderiv, noise)

vec4    NoiseDeriv(vec3 p)
{
    //	establish our grid cell and unit position
    vec3 Pi = floor(p);
    vec3 Pf = p - Pi;
    vec3 Pf_min1 = Pf - 1.0;

    //	calculate the hash
    //	(various hashing methods listed in order of speed)
    vec4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;
    FastHash3D(Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1);

    //	calculate the gradients
    const vec4 C = vec4(0.49999);
    vec4 grad_x0 = hashx0 - C;
    vec4 grad_y0 = hashy0 - C;
    vec4 grad_z0 = hashz0 - C;
    vec4 norm_0 = inversesqrt(grad_x0 * grad_x0 + grad_y0 * grad_y0 + grad_z0 * grad_z0);
    grad_x0 *= norm_0;
    grad_y0 *= norm_0;
    grad_z0 *= norm_0;
    vec4 grad_x1 = hashx1 - C;
    vec4 grad_y1 = hashy1 - C;
    vec4 grad_z1 = hashz1 - C;
    vec4 norm_1 = inversesqrt(grad_x1 * grad_x1 + grad_y1 * grad_y1 + grad_z1 * grad_z1);
    grad_x1 *= norm_1;
    grad_y1 *= norm_1;
    grad_z1 *= norm_1;
    vec4 grad_results_0 = vec2(Pf.x, Pf_min1.x).xyxy * grad_x0 + vec2(Pf.y, Pf_min1.y).xxyy * grad_y0 + Pf.zzzz * grad_z0;
    vec4 grad_results_1 = vec2(Pf.x, Pf_min1.x).xyxy * grad_x1 + vec2(Pf.y, Pf_min1.y).xxyy * grad_y1 + Pf_min1.zzzz * grad_z1;

    //	get lengths in the x+y plane
    vec3 Pf_sq = Pf*Pf;
    vec3 Pf_min1_sq = Pf_min1*Pf_min1;
    vec4 vecs_len_sq = vec2(Pf_sq.x, Pf_min1_sq.x).xyxy + vec2(Pf_sq.y, Pf_min1_sq.y).xxyy;

    //	evaluate the surflet
    vec4 m_0 = vecs_len_sq + Pf_sq.zzzz;
    m_0 = max(1.0 - m_0, 0.0);
    vec4 m2_0 = m_0 * m_0;
    vec4 m3_0 = m_0 * m2_0;

    vec4 m_1 = vecs_len_sq + Pf_min1_sq.zzzz;
    m_1 = max(1.0 - m_1, 0.0);
    vec4 m2_1 = m_1 * m_1;
    vec4 m3_1 = m_1 * m2_1;

    //	calculate the derivatives
    vec4  temp_0 = -6.0 * m2_0 * grad_results_0;
    float xderiv_0 = dot(temp_0, vec2(Pf.x, Pf_min1.x).xyxy) + dot(m3_0, grad_x0);
    float yderiv_0 = dot(temp_0, vec2(Pf.y, Pf_min1.y).xxyy) + dot(m3_0, grad_y0);
    float zderiv_0 = dot(temp_0, Pf.zzzz) + dot(m3_0, grad_z0);

    vec4  temp_1 = -6.0 * m2_1 * grad_results_1;
    float xderiv_1 = dot(temp_1, vec2(Pf.x, Pf_min1.x).xyxy) + dot(m3_1, grad_x1);
    float yderiv_1 = dot(temp_1, vec2(Pf.y, Pf_min1.y).xxyy) + dot(m3_1, grad_y1);
    float zderiv_1 = dot(temp_1, Pf_min1.zzzz) + dot(m3_1, grad_z1);

    const float FINAL_NORMALIZATION = 2.3703703703703703703703703703704;	//	scales the final result to a strict (-1.0, 1.0) range
    return  vec4(vec3(xderiv_0, yderiv_0, zderiv_0) + vec3(xderiv_1, yderiv_1, zderiv_1),
                 dot(m3_0, grad_results_0) + dot(m3_1, grad_results_1)) * FINAL_NORMALIZATION;
}

#endif

#endif
