#define MAP_TYPE__COLOR_MAP 0u
#define MAP_TYPE__GLOW_MAP 1u
#define MAP_TYPE__HEIGHT_MAP 2u

#define BODY_TYPE__BROWN_DWARF 0u
#define BODY_TYPE__MAIN_SEQUENCE 1u

#define SUNSPOTS_TYPE__LARGE 0u
#define SUNSPOTS_TYPE__SMALL 1u

float encode_temp(float temp) {
    return clamp(temp * (1000.0f / 65535.0f), 0.0f, 1.0f);
}

struct StarParams {
    float surf_temp;
    vec2 flow_magn;
    vec2 flow_freq;
    vec2 flow_octaves;
    float gran_magn;
    float gran_freq;
    float gran_octaves;
    float gran_temp_distort;
    float gran_top_temp;
    float gran_bot_temp;
    float spot_rad_inner;
    float spot_rad_outer;
    vec2 spot_freq;
    vec2 spot_density;
    float spot_max_lat;
    float spot_min_lat;
    float spot_filament_freq;
    float spot_filament_temp;
    float factor;
};

struct Sunspots {
    float spot_mask;
    float fila_mask;
    float filas;
};

Sunspots get_sunspots(vec3 coords, StarParams star, uint sunspots_type, vec3 randomize, NoiseParams noise) {
    vec3 binormal = normalize(coords);

    float freq = 0.0f;
    float density = 1.0f;
    if (sunspots_type == SUNSPOTS_TYPE__LARGE) {
        freq = star.spot_freq.x;
        density = star.spot_density.x;
    } else if (sunspots_type == SUNSPOTS_TYPE__SMALL) {
        freq = star.spot_freq.y;
        density = star.spot_density.y;
    }

    noise.octaves = 8;

    Sunspots sunspots = Sunspots(1.0, 1.0, 0.0);

    float fi, rnd, t;
    vec4 cell;
    float rad_factor = 0.8 / density;

    noise.h = 0.8;

    vec3 dist = vec3(0.01f * noise_fbm_float(coords * 3.6 + randomize, noise)
        * dot(noise_u_float(coords + randomize), 120.0)
        + noise_fbm_float(coords + randomize, NoiseParams(8.8, 10, 0.8, 0.5, 0.0001, 0.0, 1.0))
    );
    coords += dist * 0.5;

    float lat = abs(coords.y);
    if (lat > star.spot_max_lat * (1.0f + pow(0.1f, star.spot_max_lat)) || lat < star.spot_min_lat)
    {
        sunspots.spot_mask = 1.0;
        sunspots.fila_mask = 0.0;
    } else {
        cell = cell2_noise_sphere(coords, freq * 0.3 * density);

        fi = acos(dot(binormal, normalize(cell.xyz - coords))) / TAU;

        t = saturate(
            (cell.w * rad_factor - star.spot_rad_inner)
                / (star.spot_rad_outer - star.spot_rad_inner)
        );
        sunspots.spot_mask *= smoothstep(0.0, 0.2, t);
        sunspots.fila_mask *= (1.0 - smoothstep(0.0, 1.0, t)) * smoothstep(0.0, 0.0, t) * 0.85;
        sunspots.filas += noise_u_float(vec3(star.spot_filament_freq * fi, rnd, rnd)) * t * 0.5;
    }

    return sunspots;
}

float get_map(vec3 coords, uint map_type, uint body_type) {
    StarParams star = StarParams(
        sun_surf_temp,
        vec2(
            unwrap_with_or(0.0f, sun_flow_magn.x, 1.0f),
            unwrap_or(sun_flow_magn.y, 3.0f / sun_surf_temp)
        ),
        vec2(
            unwrap_with_or(0.0f, sun_flow_freq.x, 40.0f),
            unwrap_or(sun_flow_freq.y, 0.0f)
        ),
        vec2(
            unwrap_or(sun_flow_octaves.x, 5.0f),
            unwrap_or(sun_flow_octaves.y, 15.0f)
        ),
        sun_gran_magn,
        sun_gran_freq,
        sun_gran_octaves,
        sun_gran_temp_distort,
        sun_gran_top_temp,
        sun_gran_bot_temp,
        unwrap_or(sun_spot_rad_inner, 0.1f) * 2.0f,
        unwrap_or(sun_spot_rad_outer, 0.175f) * 4.0f,
        vec2(
            sun_spot_freq.x,
            unwrap_or(sun_spot_freq.y, 1.2f) * 100.0f
        ),
        vec2(
            sun_spot_density.x,
            unwrap_or(sun_spot_density.y, 0.5f) * 0.1f * float(sun_spot_freq.x < 25.0f) + 0.001f
        ),
        sun_spot_max_lat,
        sun_spot_min_lat,
        sun_spot_filament_freq,
        sun_spot_filament_temp,
        sun_factor
    );

    vec3 randomize = unwrap_star_randomize_or(
        randomize,
        hash3(vec2(star.surf_temp, star.surf_temp))
    );

    bool is_red_giant = star.gran_freq < 5.0f;
    if (is_red_giant && body_type == BODY_TYPE__MAIN_SEQUENCE) {
        star.flow_octaves.x = 1.0f;
        star.flow_octaves.y = 1.0f;
        star.gran_magn = min(star.gran_magn, 1.4f);
        star.gran_freq *= 20.0;
        star.gran_octaves = 10.0f;
        star.gran_temp_distort = 2.0f;
        star.gran_top_temp = 1.0f;
        star.gran_bot_temp = 0.8f;
    }

    if (body_type == BODY_TYPE__BROWN_DWARF) {
        // Can be 0 on high mass brown dwarfs
        star.gran_freq = 10.0f * min(pow(star.surf_temp, 30.0f), 1.0f) * pow(star.surf_temp, 2.0f);
    }

    NoiseParams noise = NoiseParams(
        2.218281828459,
        star.gran_octaves,
        0.1,
        0.8,
        0.0001,
        0.0,
        1.0
    );

    vec3 point = coords * vec3(1.0) + randomize;
    vec3 dist = 2.5 * noise_fbm_vec3(point * 0.5, noise);

    noise.h = 0.0;
    noise.octaves = star.flow_octaves.x;

    float small_flows = star.flow_magn.x * 0.1
        * noise_fbm_float(point * pow(star.flow_magn.x, 2.0f) + dist, noise);

    noise.octaves = star.flow_octaves.y;

    float large_flows = star.flow_magn.y * 0.1
        * noise_fbm_float(point * pow(star.flow_freq.y, 2.0f) + dist, noise);

    noise.octaves = 2;

    point = coords * star.gran_freq / 3.0f + randomize;
    dist = vec3(star.gran_temp_distort * noise_fbm_float(point * 0.2, noise));

    vec2 cell = cell3_noise_vec2(point + dist);
    float gran = smoothstep(0.1, 1.0, sqrt(abs(cell.y - cell.x)));

    Sunspots large_sunspots = Sunspots(1.0, 0.0, 0.0);
    Sunspots small_sunspots = Sunspots(1.0, 0.0, 0.0);

    if ((star.spot_density.x + star.spot_density.y > 0.01) && !is_red_giant) {
        noise.octaves = 5;

        large_sunspots = get_sunspots(coords, star, SUNSPOTS_TYPE__LARGE, randomize, noise);
        small_sunspots = get_sunspots(coords, star, SUNSPOTS_TYPE__SMALL, randomize, noise);
    }

    float fila_temp = unwrap_or(star.spot_filament_temp, star.gran_top_temp * 0.8);
    float spot_temp = 0.0f;
    float sunspots = mix(spot_temp, 1.0f, large_sunspots.spot_mask * small_sunspots.spot_mask)
        * (1.0f - (large_sunspots.fila_mask + small_sunspots.fila_mask))
        + (large_sunspots.fila_mask + small_sunspots.fila_mask)
        * mix(spot_temp, fila_temp, large_sunspots.filas + small_sunspots.filas)
        * min(large_sunspots.spot_mask * small_sunspots.spot_mask + 0.04f, 1.0f);

    if (map_type == MAP_TYPE__HEIGHT_MAP) {
        float height = gran * (0.1f + 0.4f * float(is_red_giant)) * sunspots;

        height = soft_poly_min(height, 0.99, 0.3);
        height = soft_poly_max(height, 0.01, 0.3);

        return height;
    } else if (map_type == MAP_TYPE__GLOW_MAP) {
        return (large_flows + small_flows
            + mix(
                star.gran_bot_temp,
                star.gran_top_temp,
                gran * min(
                    large_sunspots.spot_mask * small_sunspots.spot_mask + 0.04f,
                    1.0f
                )
            ))
            * 1.3f
            * sunspots;
    }
}

float get_brown_dwarf_glow_map(vec3 coords) {
    return get_map(coords, MAP_TYPE__GLOW_MAP, BODY_TYPE__BROWN_DWARF);
}

float get_brown_dwarf_height_map(vec3 coords) {
    return get_map(coords, MAP_TYPE__HEIGHT_MAP, BODY_TYPE__BROWN_DWARF);
}

float get_main_sequence_glow_map(vec3 coords) {
    return get_map(coords, MAP_TYPE__GLOW_MAP, BODY_TYPE__MAIN_SEQUENCE);
}

float get_main_sequence_height_map(vec3 coords) {
    return get_map(coords, MAP_TYPE__HEIGHT_MAP, BODY_TYPE__MAIN_SEQUENCE);
}
